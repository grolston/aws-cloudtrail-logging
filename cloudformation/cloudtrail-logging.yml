---
AWSTemplateFormatVersion: 2010-09-09
Description: >
  CloudTrail logging/monitoring capabilities for compliance
Metadata:
  Stack:
    Value: 0
  VersionDate:
    Value: 2020-10-18
  Identifier:
    Value: monitoring
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Tagging
        Parameters:
          - pCidValue
          - pCustomerValue
    ParameterLabels:
      pCidValue:
        default: CID Tag
      pCustomerValue:
        default: Customer Tag

Parameters:

  pCidValue:
    Description: >
      Customer ID found in Salesforce
    Type: String
    MinLength: 1

  pCustomerValue:
    Description: The customer name for the Org
    Type: String
    MinLength: 1

Resources:

  rAwsLogArchiveBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      AccessControl: LogDeliveryWrite
      LifecycleConfiguration:
        Rules:
        - Id: Transition90daysRetain7yrs
          Status: Enabled
          ExpirationInDays: 2555
          Transition:
            TransitionInDays: 90
            StorageClass: GLACIER
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: CID
          Value: !Ref pCidValue
        - Key: Customer
          Value: !Ref pCustomerValue

  rAwsLogArchiveBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rAwsLogArchiveBucket
      PolicyDocument:
        Statement:
        - Sid: Enforce HTTPS Connections
          Action: s3:*
          Effect: Deny
          Principal: '*'
          Resource: !Sub "${rAwsLogArchiveBucket.Arn}/*"
          Condition:
            Bool:
              aws:SecureTransport: false
        - Sid: Restrict Delete* Actions
          Action: s3:Delete*
          Effect: Deny
          Principal: '*'
          Resource: !Sub "${rAwsLogArchiveBucket.Arn}/*"
        - Sid: DenyUnEncryptedObjectUploads
          Effect: Deny
          Principal: '*'
          Action: s3:PutObject
          Resource: !Sub "${rAwsLogArchiveBucket.Arn}/*"
          Condition:
            StringNotEquals:
              s3:x-amz-server-side-encryption: AES256

  rCloudTrailBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref rAwsLogArchiveBucket
        LogFilePrefix: cloudtrail-logs
      Tags:
        - Key: CID
          Value: !Ref pCidValue
        - Key: Customer
          Value: !Ref pCustomerValue

  rCloudTrailS3Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rCloudTrailBucket
      PolicyDocument:
        Statement:
        - Sid: AWSCloudTrailAclCheck20150319
          Effect: Allow
          Principal:
            Service: cloudtrail.amazonaws.com
          Action: s3:GetBucketAcl
          Resource: !GetAtt rCloudTrailBucket.Arn
        - Sid: AWSCloudTrailWrite20150319
          Effect: Allow
          Principal:
            Service: cloudtrail.amazonaws.com
          Action: s3:PutObject
          Resource: !Sub "${rCloudTrailBucket.Arn}/*"
          Condition:
            StringEquals:
              s3:x-amz-acl: bucket-owner-full-control
        - Sid: Enforce HTTPS Connections
          Action: s3:*
          Effect: Deny
          Principal: '*'
          Resource: !Sub "${rCloudTrailBucket.Arn}/*"
          Condition:
            Bool:
              aws:SecureTransport: false
        - Sid: Restrict Delete* Actions
          Action: s3:Delete*
          Effect: Deny
          Principal: '*'
          Resource: !Sub "${rCloudTrailBucket.Arn}/*"
        - Sid: DenyUnEncryptedObjectUploads
          Effect: Deny
          Principal: '*'
          Action: s3:PutObject
          Resource: !Sub "${rCloudTrailBucket.Arn}/*"
          Condition:
            StringNotEquals:
              s3:x-amz-server-side-encryption: AES256

  rCloudTrailLoggingLocal:
    Type: AWS::CloudTrail::Trail
    DependsOn: rCloudTrailS3Policy
    Properties:
      S3BucketName: !Ref rCloudTrailBucket
      IsLogging: true
      EnableLogFileValidation: true
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
      EventSelectors:
        - IncludeManagementEvents: true
      CloudWatchLogsLogGroupArn: !GetAtt rCloudTrailLogGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt rCloudWatchLogsRole.Arn
      Tags:
        - Key: CID
          Value: !Ref pCidValue
        - Key: Customer
          Value: !Ref pCustomerValue

  rCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - cloudtrail.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cloudwatchlogsrole
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: AWSCloudTrailCreateLogStream20141101
            Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${rCloudTrailLogGroup}:log-stream:*"
      Tags:
        - Key: CID
          Value: !Ref pCidValue
        - Key: Customer
          Value: !Ref pCustomerValue

  rCloudTrailRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cloudtrail-limited-actions
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:ListBucket
            Resource: !Sub ${rCloudTrailBucket.Arn}
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:GetObject
            Resource: !Sub "${rCloudTrailBucket.Arn}/*"
      Tags:
        - Key: CID
          Value: !Ref pCidValue
        - Key: Customer
          Value: !Ref pCustomerValue

  rCloudTrailProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref rCloudTrailRole

  rCloudTrailLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 90

  rIAMPolicyChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref rCloudTrailLogGroup
      FilterPattern: >-
        {($.eventName=DeleteGroupPolicy) ||
        ($.eventName=DeleteRolePolicy) ||
        ($.eventName=DeleteUserPolicy) ||
        ($.eventName=PutGroupPolicy) ||
        ($.eventName=PutRolePolicy) ||
        ($.eventName=PutUserPolicy) ||
        ($.eventName=CreatePolicy) ||
        ($.eventName=DeletePolicy) ||
        ($.eventName=CreatePolicyVersion) ||
        ($.eventName=DeletePolicyVersion) ||
        ($.eventName=AttachRolePolicy) ||
        ($.eventName=DetachRolePolicy) ||
        ($.eventName=AttachUserPolicy) ||
        ($.eventName=DetachUserPolicy) ||
        ($.eventName=AttachGroupPolicy) ||
        ($.eventName=DetachGroupPolicy)}
      MetricTransformations:
      - MetricNamespace: LogMetrics
        MetricName: IAMPolicyEventCount
        MetricValue: '1'

  rNetworkAclChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref rCloudTrailLogGroup
      FilterPattern: >-
        {
          ($.eventName = CreateNetworkAcl) ||
          ($.eventName = CreateNetworkAclEntry) ||
          ($.eventName = DeleteNetworkAcl) ||
          ($.eventName = DeleteNetworkAclEntry) ||
          ($.eventName = ReplaceNetworkAclEntry) ||
          ($.eventName = ReplaceNetworkAclAssociation)
        }
      MetricTransformations:
        - MetricNamespace: LogMetrics
          MetricName: NetworkAclEventCount
          MetricValue: '1'

  rNetworkAclChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: >
        Alarms when an API call is made to create, update or delete
        a Network ACL.
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      OKActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      MetricName: NetworkAclEventCount
      Namespace: LogMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 1

  rSecurityGroupChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref rCloudTrailLogGroup
      FilterPattern: >-
        {
          ($.eventName = AuthorizeSecurityGroupIngress) ||
          ($.eventName = AuthorizeSecurityGroupEgress) ||
          ($.eventName = RevokeSecurityGroupIngress) ||
          ($.eventName = RevokeSecurityGroupEgress) ||
          ($.eventName = CreateSecurityGroup) ||
          ($.eventName = DeleteSecurityGroup)
        }
      MetricTransformations:
        - MetricNamespace: LogMetrics
          MetricName: SecurityGroupEventCount
          MetricValue: '1'

  rSecurityGroupChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: rNetworkAclChangesAlarm
    Properties:
      AlarmDescription: Alarms when an API call is made to create, update or delete
        a Security Group.
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      OKActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      MetricName: SecurityGroupEventCount
      Namespace: LogMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 1

  rIAMRootActivity:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref rCloudTrailLogGroup
      FilterPattern: >-
        {$.userIdentity.type="Root" && $.userIdentity.invokedBy NOT EXISTS && $.eventType !="AwsServiceEvent"}
      MetricTransformations:
      - MetricNamespace: LogMetrics
        MetricName: RootUserPolicyEventCount
        MetricValue: '1'

  rRootActivityAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: rSecurityGroupChangesAlarm
    Properties:
      AlarmDescription: Root user activity detected!
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      OKActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      MetricName: RootUserPolicyEventCount
      Namespace: LogMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 1

  rIamNonMfaSignIn:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref rCloudTrailLogGroup
      FilterPattern: >-
        {($.eventName="ConsoleLogin") && ($.additionalEventData.MFAUsed !="Yes")}
      MetricTransformations:
      - MetricNamespace: LogMetrics
        MetricName: MFAPolicyEventCount
        MetricValue: '1'

  rIamNonMfaSignInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Non MFA User Sign Detected!
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      OKActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      MetricName: MFAPolicyEventCount
      Namespace: LogMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 1

  rUnauthorizedAttempts:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref rCloudTrailLogGroup
      FilterPattern: >-
        {($.errorCode="*UnauthorizedOperation") || ($.errorCode="AccessDenied*")}
      MetricTransformations:
      - MetricNamespace: LogMetrics
        MetricName: UnauthorizedAttemptCount
        MetricValue: '1'

  rUnauthorizedAttemptAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: rRootActivityAlarm
    Properties:
      AlarmDescription: Multiple unauthorized actions or logins attempted!
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      OKActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      MetricName: UnauthorizedAttemptCount
      Namespace: LogMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 5

  rIAMPolicyChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: rUnauthorizedAttemptAlarm
    Properties:
      AlarmDescription: IAM Configuration changes detected!
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      OKActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      MetricName: IAMPolicyEventCount
      Namespace: LogMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 1

  rIAMCreateAccessKeyAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: rIAMPolicyChangesAlarm
    Properties:
      AlarmDescription: 'Warning: New IAM access key was created. Please be sure this
        action was necessary.'
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      OKActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      MetricName: NewAccessKeyCreated
      Namespace: LogMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 1

  rIAMCreateAccessKey:
    Type: AWS::Logs::MetricFilter
    DependsOn: rIAMCreateAccessKeyAlarm
    Properties:
      LogGroupName: !Ref rCloudTrailLogGroup
      FilterPattern: >-
        {($.eventName=CreateAccessKey)}
      MetricTransformations:
      - MetricNamespace: LogMetrics
        MetricName: NewAccessKeyCreated
        MetricValue: '1'

  rCloudTrailChangeAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: rIAMCreateAccessKeyAlarm
    Properties:
      AlarmDescription: 'Warning: Changes to CloudTrail log configuration detected
        in this account'
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      OKActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      MetricName: CloudTrailChangeCount
      Namespace: LogMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 1

  rCloudTrailChange:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref rCloudTrailLogGroup
      FilterPattern: >-
        {($.eventName=CreateTrail) ||
        ($.eventName=UpdateTrail) ||
        ($.eventName=DeleteTrail) ||
        ($.eventName=StartLogging) ||
        ($.eventName=StopLogging)}
      MetricTransformations:
        - MetricNamespace: LogMetrics
          MetricName: CloudTrailChangeCount
          MetricValue: '1'

  rIamFailedSignIn:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref rCloudTrailLogGroup
      FilterPattern: >-
        {($.eventName=ConsoleLogin) &&
        ($.errorMessage="Failed authentication")}
      MetricTransformations:
      - MetricNamespace: LogMetrics
        MetricName: ConsoleFailedLoginEventCount
        MetricValue: '1'

  rIamFailedSignInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription:  AWS Management Console authentication failures
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      OKActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      MetricName: ConsoleFailedLoginEventCount
      Namespace: LogMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 1

  rCmkDisableDeletion:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref rCloudTrailLogGroup
      FilterPattern: >-
        {($.eventSource=kms.amazonaws.com) &&
        (($.eventName=DisableKey) ||
        ($.eventName=ScheduleKeyDeletion))}
      MetricTransformations:
      - MetricNamespace: LogMetrics
        MetricName: disablingordeletionCMKs
        MetricValue: '1'

  rCmkDisableDeletionAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Disabling or scheduled deletion of customer created CMKs
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      OKActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      MetricName: disablingordeletionCMKs
      Namespace: LogMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 1

  rChangesToNetworkGateway:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref rCloudTrailLogGroup
      FilterPattern: >-
        {($.eventName=CreateCustomerGateway) ||
        ($.eventName=DeleteCustomerGateway) ||
        ($.eventName=AttachInternetGateway) ||
        ($.eventName=CreateInternetGateway) ||
        ($.eventName=DeleteInternetGateway) ||
        ($.eventName=DetachInternetGateway)}
      MetricTransformations:
      - MetricNamespace: LogMetrics
        MetricName: ChangesToNetworkGateway
        MetricValue: '1'

  rChangesToNetworkGatewayAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Changes made to Customer Gateway
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      OKActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      MetricName: ChangesToNetworkGateway
      Namespace: LogMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 1

  rS3BucketPolicyChanges:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref rCloudTrailLogGroup
      FilterPattern: >-
        {($.eventSource=s3.amazonaws.com) &&
        (($.eventName=PutBucketAcl) ||
        ($.eventName=PutBucketPolicy) ||
        ($.eventName=PutBucketCors) ||
        ($.eventName=PutBucketLifecycle) ||
        ($.eventName=PutBucketReplication) ||
        ($.eventName=DeleteBucketPolicy) ||
        ($.eventName=DeleteBucketCors) ||
        ($.eventName=DeleteBucketLifecycle) ||
        ($.eventName=DeleteBucketReplication))}
      MetricTransformations:
      - MetricNamespace: LogMetrics
        MetricName: S3BucketPolicyChange
        MetricValue: '1'

  rS3BucketPolicyChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: rRootActivityAlarm
    Properties:
      AlarmDescription: S3 Bucket Policy Change detected.
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      OKActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      MetricName: S3BucketPolicyChange
      Namespace: LogMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 1

  rAwsConfigChanges:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref rCloudTrailLogGroup
      FilterPattern: >-
        {($.eventSource=config.amazonaws.com) &&
        (($.eventName=StopConfigurationRecorder) ||
        ($.eventName=DeleteDeliveryChannel) ||
        ($.eventName=PutDeliveryChannel) ||
        ($.eventName=PutConfigurationRecorder))}
      MetricTransformations:
      - MetricNamespace: LogMetrics
        MetricName: AwsConfigChanges
        MetricValue: '1'

  rAwsConfigChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: rRootActivityAlarm
    Properties:
      AlarmDescription: AWS Config change detected.
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      OKActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      MetricName: AwsConfigChanges
      Namespace: LogMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 1

  rRouteTableChanges:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref rCloudTrailLogGroup
      FilterPattern: >-
        {($.eventName=CreateRoute) ||
        ($.eventName=CreateRouteTable) ||
        ($.eventName=ReplaceRoute) ||
        ($.eventName=ReplaceRouteTableAssociation) ||
        ($.eventName=DeleteRouteTable) ||
        ($.eventName=DeleteRoute) ||
        ($.eventName=DisassociateRouteTable)}
      MetricTransformations:
      - MetricNamespace: LogMetrics
        MetricName: RouteTableChanges
        MetricValue: '1'

  rRouteTableChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: rRootActivityAlarm
    Properties:
      AlarmDescription: Route Table change detected.
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      OKActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      MetricName: RouteTableChanges
      Namespace: LogMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 1

  rVpcChanges:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref rCloudTrailLogGroup
      FilterPattern: >-
        {($.eventName=CreateVpc) ||
        ($.eventName=DeleteVpc) ||
        ($.eventName=ModifyVpcAttribute) ||
        ($.eventName=AcceptVpcPeeringConnection) ||
        ($.eventName=CreateVpcPeeringConnection) ||
        ($.eventName=DeleteVpcPeeringConnection) ||
        ($.eventName=RejectVpcPeeringConnection) ||
        ($.eventName=AttachClassicLinkVpc) ||
        ($.eventName=DetachClassicLinkVpc) ||
        ($.eventName=DisableVpcClassicLink) ||
        ($.eventName=EnableVpcClassicLink)}
      MetricTransformations:
      - MetricNamespace: LogMetrics
        MetricName: VpcChanges
        MetricValue: '1'

  rVpcChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: rRootActivityAlarm
    Properties:
      AlarmDescription: VPC change detected.
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      OKActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:Opsgenie"
      MetricName: VpcChanges
      Namespace: LogMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 1

Outputs:
  oArchiveLogsBucket:
    Value: !Ref rAwsLogArchiveBucket
  oCloudTrailLogGroup:
    Value: !Ref rCloudTrailLogGroup
